<%- include('../fragments/header'); -%>
  <script src="/js/ace-builds/src-min/ace.js" type="text/javascript" charset="utf-8"></script>
  <div class="container main-content">
  	<div id="wrapper">
  		<div id="leftHandSide">
  			<h3>Expert Mode</h3>
        <p><strong>DO NOT USE THIS PAGE WITHOUT DISCUSSING IT WITH ME ON THE NODE-RED SLACK FIRST</strong></p>
        <p><strong>NO I REALLY REALLY MEAN IT, YOU WILL JUST BREAK SHIT!</strong></p>
  			<p>This allows you to build the JSON that will be passed to the Google Assistant to descrcibe the device. 
  				You will read the documentation for the Device <a href="https://developers.google.com/actions/smarthome/guides/">Types</a>
  				and <a href="https://developers.google.com/actions/smarthome/traits/">Traits</a> to help craft custom devices.</p>
  				<p><strong>Remember</strong> to fill in the extra <em>state</em> object which needs to hold the starting state for all the included Traites. Look
  				at the JSON responses to the Query command for the given Trait for details.</p>
  				<p><strong>Warning</strong> there is only basic JSON syntax checking, there is currently no checking to make sure the 
  				structure is correct.</p>
  				<button onclick="save()">Save</button>
  				<button onclick="window.location.href = '/user/devices'">Cancel</button>
  		</div>
  		<div id="rightHandSide">
  			<input id="id" type="text" name="id" value="<%= id %>" hidden>
  			<input id="user" type="text" name="user" value="<%= user.username %>" hidden>
  			<pre id="editor"><%- JSON.stringify(device, null, "\t") %></pre>
			</div>
  	</div>
	</div>
  <script type="text/javascript">
  	var editor = ace.edit("editor");
    editor.setTheme("ace/theme/eclipse");
    editor.session.setMode("ace/mode/json");
    editor.session.setOptions({ tabSize: 2, useSoftTabs: true});

    function save() {
    	var id = document.getElementById("id").value;
    	var user = document.getElementById("user").value;

			var annotations = editor.getSession().getAnnotations();
    	console.log(annotations);
    	for (var i = 0 ; i<annotations.length; i++) {
    		if (annotations[i].type == "error") {
    			alert(annotations[i].text + " on line " + (annotations[i].row +1));
    			return;
    		}
    	}

    	var dev;

    	try {
    		dev = JSON.parse(editor.getValue());
    	} catch (ex) {
    		alert("not valid JSON");
    		return;
    	}

    	dev.username = user;
    	console.log(dev);

    	if (id != -1) {
    		dev._id = id;
    		console.log("update");

    		$.ajax({
          url: '/user/devices/' + dev._id,
          method: 'POST',
          data: JSON.stringify(dev),
          contentType: "application/json",
          success: function(data){
            window.location.href = "/user/devices";
          },
          dataType: 'json'
        }).fail(function(){
          alert('failed to update device')
        });

    	} else {
    		console.log("new device");
    		
    		$.ajax({
        	url: '/user/devices',
          method: 'PUT',
          data: JSON.stringify(dev),
          contentType: "application/json",
          success: function(data){
            window.location.href = "/user/devices";
          },
          dataType: 'json'
        }).fail(function(){
          alert('failed to create device');
        });
    	}
    }
  </script>
<%- include('../fragments/footer'); -%>